<?php
/**
 * Chronolabs REST Checksums/Hashes Selector API
 *
 * You may not change or alter any portion of this comment or credits
 * of supporting developers from this source code or any supporting source code
 * which is considered copyrighted (c) material of the original comment or credit authors.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * @copyright       Chronolabs Cooperative http://labs.coop
 * @license         GNU GPL 2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)
 * @package         checksums
 * @since           1.0.2
 * @author          Simon Roberts <meshy@labs.coop>
 * @version         $Id: functions.php 1000 2013-06-07 01:20:22Z mynamesnot $
 * @subpackage		hashes
 * @description		Checksums/Hashes API Service REST
 * @link			https://screening.labs.coop Screening API Service Operates from this URL
 * @category		cryptographic
 * @category		checksums
 * @filesource
 */

include_once dirname(__FILE__) . DIRECTORY_SEPARATOR . 'hash.php';

if (!class_exists('hashesAPI')) {

	/**
	 * Class model for Checksums Operations and Calculation
	 * 
	 * @abstract
	 * @author Simon Roberts
	 */
	class hashesAPI {
		
		/**
		 * Associative array containing the child extension classes data
		 * 
		 * @var array
		 */
		var $hashes = array();
		
		/**
		 * Constructor for Class
		 */
		function __construct() {
			$this->hashes = $this->getHashesArray();
		}
		
		/**
		 * Magic Method for calling hash types
		 * 
		 * @example In this example if you called: $this->md5('blah') = md5('blah)
		 * @param string $method the method being called
		 * @param array $variables variables being passed when called
		 * @return multitype:string
		 */
		function __call($method, $variables) {
			if (!isset($variables[0])) {
				return array('error'=>'Neither $_GET["data"] or $_POST["data"] is set there is no data to checksum at the moment');
			}
			if (!in_array($method, array_keys($this->hashes))) {
				return array('error'=>'The hashing algoritm selected is not valid you may choose from the options of: '. implode(', ', array_keys($this->hashes)));
			}	
			return $this->hashes[$method]['class']->calc($variables[0]);
		}
		
		/**
		 * Function that returns the hashes information array from the filebase & classes!
		 * 
		 * @return array
		 */
		private function getHashesArray() 
		{
			static $hashes = array();
			if (empty($hashes) && count($hashes)==0) {
				foreach($this->getDirListAsArray(dirname(__FILE__)) as $dir) {
					if (file_exists($filename = dirname(__FILE__) . DIRECTORY_SEPARATOR . $dir . DIRECTORY_SEPARATOR . $dir . '.php')) {
						if (!class_exists($class_name = ucfirst(strtolower($dir)) . 'HashAPI')) {
							include_once($filename);
							if (class_exists($class_name)) {
								$hashes[$dir]['class'] = new $class_name();
								$hashes[$dir]['info'] = $hashes[$dir]['class']->getInfo();
							}
						}
					}
				}
			}
			return $hashes;
		}
		
		/**
		 * gets list of name of directories inside a directory
		 * 
		 * @param string $dirname the path to build list of folders from
		 * @return array
		 */
		private function getDirListAsArray($dirname)
		{
			$ignored = array('cvs' , '_darcs');
			$list = array();
            if (substr($dirname, - 1) != '/') {
                $dirname .= '/';
            }
            if ($handle = opendir($dirname)) {
                while ($file = readdir($handle)) {
                    if (substr($file, 0, 1) == '.' || in_array(strtolower($file), $ignored))
                        continue;
                    if (is_dir($dirname . $file)) {
                        $list[$file] = $file;
                    }
                }
                closedir($handle);
                asort($list);
                reset($list);
            }
            return $list;
        }
	}
}

?>
