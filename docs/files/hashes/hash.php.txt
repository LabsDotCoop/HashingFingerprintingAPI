<?php
/**
 * Chronolabs REST Checksums/Hashes Selector API
 *
 * You may not change or alter any portion of this comment or credits
 * of supporting developers from this source code or any supporting source code
 * which is considered copyrighted (c) material of the original comment or credit authors.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * @copyright       Chronolabs Cooperative http://labs.coop
 * @license         GNU GPL 2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)
 * @package         checksums
 * @since           1.0.2
 * @author          Simon Roberts <meshy@labs.coop>
 * @version         $Id: functions.php 1000 2013-06-07 01:20:22Z mynamesnot $
 * @subpackage		hashes
 * @description		Checksums/Hashes API Service REST
 * @link			https://screening.labs.coop Screening API Service Operates from this URL
 * @category		cryptographic
 * @category		checksums
 * @filesource
 */

if (!class_exists('hashAPI')) {

	/**
	 * Class model for Checksums Operations and Calculation
	 * 
	 * @abstract
	 * @author Simon Roberts
	 */	class hashAPI {
		
		/**
		 * Associative Array of Child Information set by Childs Constructor or functions being called
		 * 
		 * @var array
		 */
		var $data = array();
		
		/**
		 * Set the information array element from either child or extenal class call
		 * 
		 * @param array $info
		 */
		public function setInfo($info) {
			$this->data['info'] = $info;
		}
		
		/**
		 * Gets the information array element from either child or extenal class call
		 * 
		 * @return array
		 */
		public function getInfo() {
			return $this->data['info'];
		}

		/**
		 * Set the variable array element from either child or extenal class call
		 *
		 * @param array $variables
		 */
		public function setVariables($variables) {
			$this->data['vars'] = $variables;
		}

		/**
		 * Gets the variable array element from either child or extenal class call
		 *
		 * @return array
		 */
		public function getVariables() {
			return $this->data['vars'];
		}
		
		/**
		 * Calculates the Hash/Checksum from provided data of the child
		 * 
		 * @param string $data
		 * @return string
		 */
		public function calc($data) {
			$ret = array();
			$ret['seconds']['start'] = microtime(true);
			$func = $this->data['info']['function'];
			$number = isset($this->data['vars']['number'])?$this->data['vars']['number']:0;
			if (!empty($func) && function_exists($func) && $number == 0) {
				$ret['hash'] = $func($data);
			} elseif (!empty($func) && function_exists($func) && $number > 0) {
				$vars = array();
				foreach($this->data['vars']['defines'] as $var => $data) {
					if (!isset($_GET[$data['variable']]) && !isset($_POST[$data['variable']])) {
						$vars[$var] = $data['default'];
					} else {
						$vars[$var] = (!isset($_GET[$data['variable']])?$_POST[$data['variable']]:$_GET[$data['variable']]);
					}
				}
				$ret['hash'] = $func($data, $vars);
			}
			$ret['seconds']['end'] = microtime(true);
			$ret['seconds']['took'] = $ret['seconds']['end'] - $ret['seconds']['start'];
			return $ret; 
		}
	}	
}

?>
